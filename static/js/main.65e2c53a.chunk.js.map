{"version":3,"sources":["loadData.ts","components/NewComment/NewComment.tsx","components/NewPost/NewPost.tsx","components/PostList/PostList.tsx","App.tsx","index.tsx"],"names":["API_URL","loadData","url","fetch","then","res","json","loadPosts","loadUsers","loadComments","NewComment","comment","name","body","email","className","href","NewPost","post","title","comments","user","address","city","street","suite","zipcode","map","key","id","PostList","posts","App","useState","setPosts","isLoading","setIsLoading","query","setQuery","filteredPosts","useMemo","filterValue","toLowerCase","filter","includes","length","type","placeholder","value","onChange","event","target","handleChange","onClick","Promise","all","postsFromApi","usersFromApi","commentsFromApi","completePost","find","person","userId","postId","disabled","ReactDOM","render","document","getElementById"],"mappings":"yTAEMA,EAAU,wCAEhB,SAASC,EAAYC,GACnB,OAAOC,MAAMD,GACVE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAGd,IAAMC,EAAYN,EAAQ,UAAYD,EAAZ,UACpBQ,EAAYP,EAAQ,UAAYD,EAAZ,UACpBS,EAAeR,EAAQ,UAAeD,EAAf,aCHvBU,G,MAAwB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC9BC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAEpB,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,iBAAiBH,GAChC,yBAAKG,UAAU,iBAAiBF,GAChC,yBAAKE,UAAU,kBACb,uBAAGC,KAAI,iBAAYF,IAChBA,OCREG,G,MAAqB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC3BC,EAA0BD,EAA1BC,MAAON,EAAmBK,EAAnBL,KAAMO,EAAaF,EAAbE,SADyB,EAEtBF,EAAKG,KAArBT,EAFsC,EAEtCA,KAAME,EAFgC,EAEhCA,MAFgC,EAQ1CI,EAAKG,KAAKC,QAJZC,EAJ4C,EAI5CA,KACAC,EAL4C,EAK5CA,OACAC,EAN4C,EAM5CA,MACAC,EAP4C,EAO5CA,QAGF,OACE,yBAAKX,UAAU,iBACb,6BACE,4BAAKH,GACL,yBAAKG,UAAU,eACb,uBAAGC,KAAI,iBAAYF,IAChBA,IAGL,yBAAKC,UAAU,WACb,6BAAMQ,GACN,6BAAMC,GACN,6BAAMC,GACN,6BAAMC,KAGV,4BAAKP,GACL,6BAAMN,GACN,yBAAKE,UAAU,oBACZK,EAASO,KAAI,SAAChB,GAAD,OACZ,kBAAC,EAAD,CACEA,QAASA,EACTiB,IAAKjB,EAAQkB,YChCZC,G,MAAsB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACpC,OACE,yBAAKhB,UAAU,kBACZgB,EAAMJ,KAAI,SAACT,GAAD,OACT,kBAAC,EAAD,CACEA,KAAMA,EACNU,IAAKV,EAAKW,WC0ELG,G,MAjFC,WAAO,IAAD,EACMC,mBAAyB,IAD/B,mBACbF,EADa,KACNG,EADM,OAEcD,oBAAS,GAFvB,mBAEbE,EAFa,KAEFC,EAFE,OAGMH,mBAAS,IAHf,mBAGbI,EAHa,KAGNC,EAHM,KAwCdC,EAAgBC,mBAAwB,WAC5C,IAAMC,EAAcJ,EAAMK,cAE1B,OAAOX,EAAMY,QAAO,SAAAzB,GAAI,OAAKA,EAAKC,MAAMuB,cAAcE,SAASH,IACzDvB,EAAKL,KAAK6B,cAAcE,SAASH,QACtC,CAACJ,EAAON,IAEX,OACE,oCACE,qDAEEA,EAAMc,OAEF,yBAAK9B,UAAU,OACb,2BACEA,UAAU,QACV+B,KAAK,OACLC,YAAY,iBACZC,MAAOX,EACPY,SAAU,SAACC,GAAD,OAzBH,SAACA,GAAgD,IAC5DF,EAAUE,EAAMC,OAAhBH,MAERV,EAASU,GAsBwBI,CAAaF,MAEpC,kBAAC,EAAD,CACEnB,MAAOM,EAAQE,EAAgBR,KAKnC,4BACEhB,UAAU,SACV+B,KAAK,SACLO,QAjEY,WACtBjB,GAAa,GAEbkB,QAAQC,IAAI,CACVhD,EACAC,EACAC,IAECL,MAAK,YAIC,IAAD,mBAHJoD,EAGI,KAFJC,EAEI,KADJC,EACI,KACEC,EAAeH,EAAa7B,KAAI,SAACT,GACrC,IAAMG,EAAOoC,EAAaG,MACxB,SAACC,GAAD,OAAkB3C,EAAK4C,SAAWD,EAAOhC,MAErCT,EAAWsC,EAAgBf,QAC/B,SAAChC,GAAD,OAAsBO,EAAKW,KAAOlB,EAAQoD,UAG5C,OAAO,eAAK7C,EAAZ,CAAkBG,OAAMD,gBAG1Bc,EAASyB,GACTvB,GAAa,OAyCP4B,SAAU7B,GAETA,EAAY,aAAe,iBC5E1C8B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.65e2c53a.chunk.js","sourcesContent":["import { Post, User, Comment } from './types';\n\nconst API_URL = 'https://jsonplaceholder.typicode.com/';\n\nfunction loadData<T>(url: string): Promise<T> {\n  return fetch(url)\n    .then(res => res.json());\n}\n\nexport const loadPosts = loadData<Post[]>(`${API_URL}posts`);\nexport const loadUsers = loadData<User[]>(`${API_URL}users`);\nexport const loadComments = loadData<Comment[]>(`${API_URL}comments`);\n","import React, { FC } from 'react';\nimport { Comment } from '../../types';\nimport './NewComment.css';\n\ninterface Props {\n  comment: Comment;\n}\n\nexport const NewComment: FC<Props> = ({ comment }) => {\n  const { name, body, email } = comment;\n\n  return (\n    <div className=\"comment\">\n      <div className=\"comment__name\">{name}</div>\n      <div className=\"comment__body\">{body}</div>\n      <div className=\"comment__email\">\n        <a href={`mailto:${email}`}>\n          {email}\n        </a>\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { CompletePost, Comment } from '../../types';\nimport { NewComment } from '../NewComment/NewComment';\nimport './NewPost.css';\n\ninterface Props {\n  post: CompletePost;\n}\n\nexport const NewPost: FC<Props> = ({ post }) => {\n  const { title, body, comments } = post;\n  const { name, email } = post.user;\n  const {\n    city,\n    street,\n    suite,\n    zipcode,\n  } = post.user.address;\n\n  return (\n    <div className=\"post__wrapper\">\n      <div>\n        <h3>{name}</h3>\n        <div className=\"user__email\">\n          <a href={`mailto:${email}`}>\n            {email}\n          </a>\n        </div>\n        <div className=\"address\">\n          <div>{city}</div>\n          <div>{street}</div>\n          <div>{suite}</div>\n          <div>{zipcode}</div>\n        </div>\n      </div>\n      <h3>{title}</h3>\n      <div>{body}</div>\n      <div className=\"comment__wrapper\">\n        {comments.map((comment: Comment) => (\n          <NewComment\n            comment={comment}\n            key={comment.id}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { CompletePost } from '../../types';\nimport { NewPost } from '../NewPost/NewPost';\nimport './PostList.css';\n\ninterface Props {\n  posts: CompletePost[];\n}\n\nexport const PostList: FC<Props> = ({ posts }) => {\n  return (\n    <div className=\"posts__wrapper\">\n      {posts.map((post: CompletePost) => (\n        <NewPost\n          post={post}\n          key={post.id}\n        />\n      ))}\n    </div>\n  );\n};\n","import React, { FC, useState, useMemo } from 'react';\nimport {\n  Post, User, Comment, CompletePost,\n} from './types';\nimport { loadPosts, loadUsers, loadComments } from './loadData';\nimport { PostList } from './components/PostList/PostList';\nimport './App.css';\n\nconst App: FC = () => {\n  const [posts, setPosts] = useState<CompletePost[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [query, setQuery] = useState('');\n\n  const handleLoadPosts = () => {\n    setIsLoading(true);\n\n    Promise.all([\n      loadPosts,\n      loadUsers,\n      loadComments,\n    ])\n      .then(([\n        postsFromApi,\n        usersFromApi,\n        commentsFromApi,\n      ]) => {\n        const completePost = postsFromApi.map((post: Post) => {\n          const user = usersFromApi.find(\n            (person: User) => post.userId === person.id,\n          ) as User;\n          const comments = commentsFromApi.filter(\n            (comment: Comment) => post.id === comment.postId,\n          ) as Comment[];\n\n          return { ...post, user, comments };\n        });\n\n        setPosts(completePost);\n        setIsLoading(false);\n      });\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setQuery(value);\n  };\n\n  const filteredPosts = useMemo<CompletePost[]>(() => {\n    const filterValue = query.toLowerCase();\n\n    return posts.filter(post => (post.title.toLowerCase().includes(filterValue))\n      || (post.body.toLowerCase().includes(filterValue)));\n  }, [query, posts]);\n\n  return (\n    <>\n      <h1>Dynamic list of posts</h1>\n      {\n        posts.length\n          ? (\n            <div className=\"app\">\n              <input\n                className=\"input\"\n                type=\"text\"\n                placeholder=\"Serch the post\"\n                value={query}\n                onChange={(event) => handleChange(event)}\n              />\n              <PostList\n                posts={query ? filteredPosts : posts}\n              />\n            </div>\n          )\n          : (\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={handleLoadPosts}\n              disabled={isLoading}\n            >\n              {isLoading ? 'Loading...' : 'Load Posts'}\n            </button>\n          )\n      }\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}